//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FifthCharacter.Attacks.Mechanics.Property {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class WeapPropTxt {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal WeapPropTxt() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("FifthCharacter.Attacks.Mechanics.Property.WeapPropTxt", typeof(WeapPropTxt).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can use a weapon that has the Ammunition property to make a ranged Attack only if you have Ammunition to fire from the weapon. Each time you Attack with the weapon, you expend one piece of Ammunition. Drawing the Ammunition from a Quiver, case, or other container is part of the Attack (you need a free hand to load a one-handed weapon). At the end of the battle, you can recover half your expended Ammunition by taking a minute to Search the battlefield. If you use a weapon that has the Ammunition property [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Ammunition {
            get {
                return ResourceManager.GetString("Ammunition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When Making an Attack with a finesse weapon, you use your choice of your Strength or Dexterity modifier for the Attack and Damage Rolls. You must use the same modifier for both rolls..
        /// </summary>
        internal static string Finesse {
            get {
                return ResourceManager.GetString("Finesse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Small creatures have disadvantage on Attack rolls with heavy Weapons. A heavy weapon’s size and bulk make it too large for a Small creature to use effectively..
        /// </summary>
        internal static string Heavy {
            get {
                return ResourceManager.GetString("Heavy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A light weapon is small and easy to handle, making it ideal for use when fighting with two Weapons..
        /// </summary>
        internal static string Light {
            get {
                return ResourceManager.GetString("Light", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Because of the time required to load this weapon, you can fire only one piece of Ammunition from it when you use an action, Bonus Action, or Reaction to fire it, regardless of the number of attacks you can normally make..
        /// </summary>
        internal static string Loading {
            get {
                return ResourceManager.GetString("Loading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A weapon that can be used to make a ranged Attack has a range in parentheses after the Ammunition or thrown property. The range lists two numbers. The first is the weapon’s normal range in feet, and the second indicates the weapon’s long range. When attacking a target beyond normal range, you have disadvantage on the Attack roll. You can’t Attack a target beyond the weapon’s long range..
        /// </summary>
        internal static string Range {
            get {
                return ResourceManager.GetString("Range", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This weapon adds 5 feet to your reach when you Attack with it, as well as when determining your reach for Opportunity Attacks with it..
        /// </summary>
        internal static string Reach {
            get {
                return ResourceManager.GetString("Reach", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A weapon with the special property has unusual rules governing its use, explained in the weapon’s description..
        /// </summary>
        internal static string Special {
            get {
                return ResourceManager.GetString("Special", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a weapon has the thrown property, you can throw the weapon to make a ranged Attack. If the weapon is a melee weapon, you use the same ability modifier for that Attack roll and damage roll that you would use for a melee Attack with the weapon. For example, if you throw a Handaxe, you use your Strength, but if you throw a Dagger, you can use either your Strength or your Dexterity, since the Dagger has the finesse property..
        /// </summary>
        internal static string Thrown {
            get {
                return ResourceManager.GetString("Thrown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This weapon requires two hands when you Attack with it..
        /// </summary>
        internal static string Two_Handed {
            get {
                return ResourceManager.GetString("Two-Handed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This weapon can be used with one or two hands. A damage value in parentheses appears with the property—the damage when the weapon is used with two hands to make a melee Attack..
        /// </summary>
        internal static string Versatile {
            get {
                return ResourceManager.GetString("Versatile", resourceCulture);
            }
        }
    }
}
